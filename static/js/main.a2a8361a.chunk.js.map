{"version":3,"sources":["api.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","App.tsx","index.tsx","theme.ts"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","Chart","useQuery","Math","floor","Date","now","fetchCoinHistory","refetchInterval","isLoading","data","type","series","map","price","x","time_open","y","open","high","low","close","options","chart","height","width","background","stroke","curve","yaxis","show","xaxis","categories","time_close","PriceUl","styled","ul","PriceLi","li","props","theme","accentColor","Price","useParams","tickersLoading","tickersData","quotes","USD","percent_change_1h","percent_change_6h","percent_change_12h","percent_change_24h","percent_change_7d","Title","h1","Loader","span","Container","div","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","Coin","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","loading","Helmet","name","rank","symbol","toFixed","description","total_supply","max_supply","to","path","CoinsList","bgColor","Img","img","Coins","slice","coin","pathname","id","src","toLowerCase","Router","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.a2a8361a.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `https://ohlcv-api.nomadcoders.workers.dev/?coinId=${coinId} `\r\n  ).then((response) => response.json());\r\n}\r\n","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface IHistorical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\n\r\nfunction Chart({ coinId }: ChartProps) {\r\n\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  );\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        'Loading...'\r\n      ) : (\r\n        <ApexChart\r\n          type='candlestick'\r\n          series={[\r\n            {\r\n              data: data?.map((price) => {\r\n                return {\r\n                  x: price.time_open,\r\n                  y: [\r\n                    price.open,\r\n                    price.high,\r\n                    price.low,\r\n                    price.close,\r\n                  ],\r\n                };\r\n              }),\r\n            } as unknown as number,\r\n          ]}\r\n          options={{\r\n            chart: {\r\n              height: 300,\r\n              width: 500,\r\n              background: 'transparent',\r\n            },\r\n            stroke: { curve: 'smooth', width: 4 },\r\n            yaxis: { show: false },\r\n            xaxis: {\r\n\r\n              type: 'datetime',\r\n              categories: data?.map((price) => price.time_close) as string[],\r\n            },\r\n\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import { useQuery } from 'react-query';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchCoinTickers } from '..//api';\r\nimport styled from 'styled-components';\r\n\r\nconst PriceUl = styled.ul``;\r\n\r\nconst PriceLi = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 2rem;\r\n  margin-bottom: 1rem;\r\n  border-radius: 1rem;\r\n  height: 50px;\r\n  line-height: 50px;\r\n  width: 100%;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  span {\r\n    color: ${(props) => props.theme.accentColor};\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\ninterface PriceParams {\r\n  coinId: string;\r\n}\r\n\r\nconst Price = () => {\r\n  const { coinId } = useParams<PriceParams>() as PriceParams;\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\r\n    ['tickers', coinId],\r\n    () => fetchCoinTickers(coinId)\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {tickersLoading ? (\r\n        'Loading...'\r\n      ) : (\r\n        <PriceUl>\r\n          <PriceLi>\r\n            percent_change_1h:\r\n            <span>{tickersData?.quotes.USD.percent_change_1h}</span>\r\n          </PriceLi>\r\n          <PriceLi>\r\n            percent_change_6h:\r\n            <span>{tickersData?.quotes.USD.percent_change_6h}</span>\r\n          </PriceLi>\r\n          <PriceLi>\r\n            percent_change_12h :\r\n            <span>{tickersData?.quotes.USD.percent_change_12h}</span>\r\n          </PriceLi>\r\n          <PriceLi>\r\n            percent_change_24h :\r\n            <span>{tickersData?.quotes.USD.percent_change_24h}</span>\r\n          </PriceLi>\r\n          <PriceLi>\r\n            percent_change_7d :\r\n            <span>{tickersData?.quotes.USD.percent_change_7d}</span>\r\n          </PriceLi>\r\n        </PriceUl>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Price;","import { useQuery } from \"react-query\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  useParams,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 33%;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    padding: 7px 0px;\r\n    display: block;\r\n  }\r\n`;\r\n\r\ninterface RouteParams {\r\n  coinId: string;\r\n}\r\ninterface RouteState {\r\n  name: string;\r\n}\r\ninterface InfoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n  description: string;\r\n  message: string;\r\n  open_source: boolean;\r\n  started_at: string;\r\n  development_status: string;\r\n  hardware_wallet: boolean;\r\n  proof_type: string;\r\n  org_structure: string;\r\n  hash_algorithm: string;\r\n  first_data_at: string;\r\n  last_data_at: string;\r\n}\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nfunction Coin() {\r\n  const { coinId } = useParams<RouteParams>();\r\n  const { state } = useLocation<RouteState>();\r\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\r\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\r\n    [\"info\", coinId],\r\n    () => fetchCoinInfo(coinId)\r\n  );\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\r\n    [\"tickers\", coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  const loading = infoLoading || tickersLoading;\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </Title>\r\n      </Header>\r\n      {loading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Rank:</span>\r\n              <span>{infoData?.rank}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Symbol:</span>\r\n              <span>${infoData?.symbol}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Price:</span>\r\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n          <Description>{infoData?.description}</Description>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Total Suply:</span>\r\n              <span>{tickersData?.total_supply}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Max Supply:</span>\r\n              <span>{tickersData?.max_supply}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n\r\n          <Tabs>\r\n            <Tab isActive={chartMatch !== null}>\r\n              <Link to={`/${coinId}/chart`}>Chart</Link>\r\n            </Tab>\r\n            <Tab isActive={priceMatch !== null}>\r\n              <Link to={`/${coinId}/price`}>Price</Link>\r\n            </Tab>\r\n          </Tabs>\r\n\r\n          <Switch>\r\n            <Route path={`/:coinId/price`}>\r\n              <Price />\r\n            </Route>\r\n            <Route path={`/:coinId/chart`}>\r\n              <Chart coinId={coinId} />\r\n            </Route>\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coin;\r\n","import { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoins } from \"../api\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CoinsList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n  background-color: white;\r\n  color: ${(props) => props.theme.bgColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 20px;\r\n    transition: color 0.2s ease-in;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface ICoin {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n}\r\n\r\nfunction Coins() {\r\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>코인</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>코인</Title>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.slice(0, 100).map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/${coin.id}`,\r\n                  state: { name: coin.name },\r\n                }}\r\n              >\r\n                <Img\r\n                  src={`https://coinicons-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\r\n                />\r\n                {coin.name} &rarr;\r\n              </Link>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coins;\r\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/:coinId\">\r\n          <Coin />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Coins />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport Router from \"./Router\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Router />\r\n      <ReactQueryDevtools initialIsOpen={true} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { theme } from \"./theme\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const theme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"#f5f6fa\",\r\n  accentColor: \"#9c88ff\",\r\n};\r\n"],"sourceRoot":""}